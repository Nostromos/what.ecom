openapi: 3.0.1
info:
  title: what.ecom
  version: 0.0.0
  description: An ExpressJS API serving a React frontend.
  contact:
    email: michael@monaghan.nyc
    name: Michael Monaghan
paths:
  /user/{id}:
    summary: Returns user information.
    get:
      summary: Gets user information for the current user, if authenticated.
      description: >-
        This path will return all profile information for the current user (if
        logged in)
      parameters:
        - in: path
          name: id
          required: true
          schema: 
            type: integer
            minimum: 1
      operationId: getUserInformation
      responses:
        200: 
          description: User found and returned.
          content:
            application/json:
              examples:
                Full User Information:
                  value:
                    [
                      {
                        id: 323,
                        first_name: "Michael",
                        last_name: "Monaghan",
                        email_address: "michael@monaghan.nyc",
                        phone: "9298914080",
                        created_at: "2022-02-17T05:00:00.000Z",
                        updated_at: "2022-06-04T04:00:00.000Z",
                        created_by: "webapp",
                        updated_by: "webapp"
                      }
                    ]
        400:
          description: Bad or malformed request.
        401:
          description: Unauthorized. Please login and retry.
        403:
          description: Forbidden. You're requesting information you shouldn't have access to. 
        404:
          description: Not found. You're requesting information for a user that does not exist. 
      tags:
        - User
  /user/register:
    summary: Registers a new user.
    post:
      summary: Registers a new user.
      description: >-
        Sends a users profile, registration & salted/hashed password info to the
        server & datastore. 
      operationId: registerNewUser
      responses:
        default:
          description: Default error sample response
      tags:
        - User
  /user/login:
    summary: Logs a user in.
    post:
      description: Logs a user in. 
      operationId: login
      responses:
        200: 
          description: success
      tags: 
        - User
components:
  schemas:
    Order:
      type: object
      properties:
        name:
          type: string
        id:
          type: string
        state:
          type: string
      xml:
        name: Order
    User:
      type: object
      properties:
        id:
          type: number
          description: Unique id for user. 
servers:
  - url: http://localhost:3000/api
    variables: {}
    description: Local Dev Server URL

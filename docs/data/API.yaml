openapi: 3.0.0
info:
  title: what.ecom
  version: 0.0.0
  description: An ExpressJS API serving a React frontend.
  contact:
    email: michael@monaghan.nyc
    name: Michael Monaghan
paths:
  
  /user/{id}:
    summary: Returns user information.
    get:
      summary: Gets user information for the current user, if authenticated.
      description: >-
        This path will return all profile information for the current user (if
        logged in)
      parameters:
        - in: path
          name: id
          required: true
          schema: 
            type: integer
            minimum: 1
      operationId: getUserInformation
      responses:
        200: 
          description: User found and returned.
          content:
            application/json:
              examples:
                Full User Information:
                  value:
                    [
                      {
                        id: 323,
                        first_name: "Michael",
                        last_name: "Monaghan",
                        email_address: "michael@monaghan.nyc",
                        phone: "9298914080",
                        created_at: "2022-02-17T05:00:00.000Z",
                        updated_at: "2022-06-04T04:00:00.000Z",
                        created_by: "webapp",
                        updated_by: "webapp"
                      }
                    ]
        400:
          description: Bad or malformed request.
        401:
          description: Unauthorized. Please login and retry.
        403:
          description: Forbidden. You're requesting information you shouldn't have access to. 
        404:
          description: Not found. You're requesting information for a user that does not exist. 
      tags:
        - User
  
  /user/register:
    summary: Registers a new user.
    post:
      summary: Registers a new user.
      description: >-
        Sends a users profile, registration & salted/hashed password info to the
        server & datastore. 
      operationId: registerNewUser
      responses:
        default:
          description: Default error sample response
      tags:
        - User
      
  /user/login:
    summary: Logs a user in.
    post:
      description: Logs a user in. 
      operationId: login
      responses:
        200: 
          description: success
      tags: 
        - User
        
  /cart/{cartId}:
    get:
      description: Get the contents of a user's cart
      responses:
        '200':
          description: Found the cart and returned it in response body.
      tags:
        - Cart
  /cart/{user_id}:
    summary: Returns cart information.
    get:
      summary: Gets a user's cart by their ID.
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
            minimum: 1
      operationId: getUserCart
      responses:
        200:
          description: Cart found and returned.
          content:
            application/json:
              examples:
                Full Cart Information:
                  value:
                    [
                      {
                        id: 232,
                        user_id: 2343,
                        total_price: $432.33
                      }
                    ]
      tags:
        - Cart
    post:
      description: 'Add item to cart'
      parameters: 
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: OK

components:
  
  schemas:
    
    Order:
      type: object
      properties:
        id:
          type: string
          description: Unique ID of the specific order.
        user_id:
          type: string
          description: Unique ID of the user who made the purchase.
        cart_id:
          type: integer
          description: Unique ID of the associated cart for the order.
        base_price:
          type: number
          description: The total price of the order before fees, discount, or tax.
        total_price:
          type: number
          description: The total price of the order including fees, discount, and tax.
        payment_card_id:
          type: integer
          description: The ID for the payment card information.
        shipping_address_id:
          type: integer
          description: ID for shipping address.
        billing_address_id:
          type: integer
          description: ID for the billing address.
        status: 
          type: string
          enum: ['checkout', 'pending', 'paid', 'preparing', 'shipped', 'fulfilled']
          description: Order status string denoting where in the pipeline the order is. 
      required:
        - id
        - user_id
        - cart_id
        - base_price
        - total_price
        - payment_card_id
        - shipping_address_id
        - billing_address_id
        - status
        
    UserID:
      type: object
      properties:
        id:
          type: integer
          description: Unique ID for user.
    
    User:
      type: object
      properties:
        id:
          type: integer
          $ref: "#/components/schemas/UserID" 
        first_name:
          type: string
          description: User's first name.
        last_name:
          type: string
          description: User's last name (aka surname).
        email_address:
          type: string
          format: email
          description: User's email address.
        phone:
          type: string
          description: User's phone number.
      required:
        - first_name
        - last_name
        - email_address
        - phone
        
servers:
  - url: http://localhost:3000/api
    variables: {}
    description: Local Dev
  - url: https://staging.what.lol/ecom/api
    variables: {}
    description: Staging
  - url: https://what.lol/ecom/api
    variables: {}
    description: Production
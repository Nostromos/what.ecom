/* ---------------------------------------
 * Create roles...
 */---------------------------------------

-- Read role for the webapp. All these options except login are explicitly disabled by default but I'm adding them for clarity of purpose behind this and other roles. 
CREATE ROLE r_read_app WITH NOSUPERUSER NOCREATEDB NOCREATEROLE NOINHERIT NOREPLICATION NOBYPASSRLS LOGIN PASSWORD /* sample password here, not the real password lol */'tx7CnGkYrC?Y?LfkbHh?';

-- Write role for the webapp, for the few cases where we're writing directly to db. 
CREATE ROLE r_write_app WITH NOSUPERUSER NOCREATEDB NOCREATEROLE NOINHERIT NOREPLICATION NOBYPASSRLS LOGIN PASSWORD /* sample password here, not the real password lol */ 'lajslejreljreljer';


/* ---------------------------------------
 * Create users...
 */---------------------------------------

CREATE USER webapp WITH NOCREATEDB LOGIN PASSWORD /* sample password here, not the real one lol */ 'KFR48dLrS@FREBAjf7#F';

/* ---------------------------------------
 * Assign roles...
 */---------------------------------------

GRANT SELECT ON ALL TABLES IN SCHEMA "public" TO r_read_app;

GRANT INSERT, UPDATE ON ALL TABLES IN SCHEMA "public" TO r_write_app;

GRANT r_read_app TO webapp;
GRANT r_write_app TO webapp;


/* ---------------------------------------
 *  Create types & domains...
 */---------------------------------------

-- ENUM for Address Type
CREATE TYPE address_type AS ENUM (
  'billing', 'shipping', 'mailing'
)

-- Checking contact name for null & spaces. 
-- I decided to do validation outside of the server but keeping this for posterity.
CREATE DOMAIN contact_name AS
  VARCHAR NOT NULL CHECK (value !~ '\s');

-- Phone Number Check
CREATE DOMAIN us_phone_number AS
  TEXT CHECK (/* TODO FINISH THIS */)

-- Order Status enum & table update
CREATE TYPE order_status AS ENUM (
  'checkout', 'pending', 'paid', 'preparing', 'shipped', 'fulfilled'
);

ALTER TABLE orders
ADD status order_status NOT NULL DEFAULT 'checkout';

/* ---------------------------------------
 * Create functions...
 */---------------------------------------

-- Create trigger to set updated_at field on each insert or update
/* we defined our function with our logic of updating updated_on with the value of now().

In the function, NEW variable is a Record Object. New contains the data thatâ€™s being inserted or updated in the table. 
This means we can update and read any value of the row before its persisted on disk.

NEW.updated_on = now() means update value of updated_on by value of now().
This way we can update any column using triggers as per our requirements.
 */
CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUGE plpgsql;


/* ---------------------------------------
 *  Create tables...
 */---------------------------------------

-- Users 
CREATE TABLE users (
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  first_name VARCHAR NOT NULL,
  last_name VARCHAR NOT NULL,
  email_address VARCHAR UNIQUE NOT NULL,
  phone VARCHAR NOT NULL,
  created_at TIMESTAMPTZ,
  updated_at TIMESTAMPTZ,
  created_by VARCHAR,
  updated_by VARCHAR
);

-- Addresses
CREATE TABLE addresses (
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  user_id INTEGER REFERENCES users(id),
  type address_type NOT NULL,
  street_number INTEGER NOT NULL,
  street_name VARCHAR(20) NOT NULL,
  street_suffix VARCHAR (5) NOT NULL,
  line_2 VARCHAR(20),
  city VARCHAR(30),
  state VARCHAR(40),
  country VARCHAR(40),
  zip VARCHAR(10)
);

-- Payments
CREATE TABLE payment_cards (
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  user_id INTEGER REFERENCES users(id),
  number VARCHAR(16) UNIQUE NOT NULL,
  security_code VARCHAR(4) NOT NULL,
  billing_address_id INTEGER REFERENCES addresses(id),
  billing_first_name VARCHAR NOT NULL,
  billing_last_name VARCHAR NOT NULL,
  card_type VARCHAR(10) NOT NULL
);

-- Products
CREATE TABLE products (
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  sku INTEGER NOT NULL,
  name VARCHAR(50) NOT NULL,
  quantity INTEGER NOT NULL,
  base_price DECIMAL(12, 2) NOT NULL,
  has_discount BOOLEAN NOT NULL,
  discount_price DECIMAL(12, 2),
  short_description VARCHAR(165),
  long_description TEXT,
  created_at TIMESTAMPTZ,
  updated_at TIMESTAMPTZ,
  created_by VARCHAR,
  updated_by VARCHAR
);

-- Product Images - list of urls to reference for product images
CREATE TABLE product_images (
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  product_id INTEGER REFERENCES products(id),
  url VARCHAR NOT NULL,
  created_at TIMESTAMPTZ,
  updated_at TIMESTAMPTZ,
  created_by VARCHAR,
  updated_by VARCHAR
);

-- Carts
CREATE TABLE carts (
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  user_id INTEGER REFERENCES users(id),
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ,
  created_by VARCHAR,
  updated_by VARCHAR
);

-- Products-Carts - combo of carts and products
CREATE TABLE products_carts (
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  cart_id INTEGER REFERENCES carts(id),
  product_id INTEGER REFERENCES products(id),
  quantity INTEGER NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ,
  created_by VARCHAR,
  updated_by VARCHAR
);

-- Orders
CREATE TABLE orders (
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  user_id INTEGER REFERENCES users(id),
  cart_id INTEGER REFERENCES carts(id),
  base_price DECIMAL(12, 2) NOT NULL,
  total_price DECIMAL(12, 2) NOT NULL,
  payment_card_id INTEGER REFERENCES payment_cards(id),
  shipping_address_id INTEGER REFERENCES addresses(id),
  billing_address_id INTEGER REFERENCES addresses(id)
);

-- Categories
CREATE TABLE categories (
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  name VARCHAR UNIQUE NOT NULL,
  description VARCHAR
);

-- Products-Categories
CREATE TABLE products_categories (
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  category_id INTEGER REFERENCES categories(id),
  product_id INTEGER REFERENCES products(id)
);


/* ---------------------------------------
 *  Populate tables...
 */---------------------------------------

-- users
COPY users
  FROM '/Users/figgefenk/Dev/Codecademy/what.ecom/backend/data/utils/sample_data/users.csv'
  DELIMITER ',' CSV HEADER;

-- addresses
COPY addresses
  FROM '/Users/figgefenk/Dev/Codecademy/what.ecom/backend/data/utils/sample_data/addresses.csv'
  DELIMITER ',' CSV HEADER;

-- payment_cards
COPY payment_cards
  FROM '/Users/figgefenk/Dev/Codecademy/what.ecom/backend/data/utils/sample_data/payment_cards.csv'
  DELIMITER ',' CSV HEADER;

-- products
COPY products
  FROM '/Users/figgefenk/Dev/Codecademy/what.ecom/backend/data/utils/sample_data/products.csv'
  DELIMITER ',' CSV HEADER;

-- product_images
COPY product_images
  FROM '/Users/figgefenk/Dev/Codecademy/what.ecom/backend/data/utils/sample_data/product_images.csv'
  DELIMITER ',' CSV HEADER;

-- carts
COPY carts
  FROM '/Users/figgefenk/Dev/Codecademy/what.ecom/backend/data/utils/sample_data/carts.csv'
  DELIMITER ',' CSV HEADER;

-- products_carts
COPY products_carts
  FROM '/Users/figgefenk/Dev/Codecademy/what.ecom/backend/data/utils/sample_data/products_carts.csv'
  DELIMITER ',' CSV HEADER;

-- orders
COPY orders
  FROM '/Users/figgefenk/Dev/Codecademy/what.ecom/backend/data/utils/sample_data/orders.csv'
  DELIMITER ',' CSV HEADER;

-- categories
COPY categories
  FROM '/Users/figgefenk/Dev/Codecademy/what.ecom/backend/data/utils/sample_data/categories.csv'
  DELIMITER ',' CSV HEADER;

-- products_categories
COPY products_categories
  FROM '/Users/figgefenk/Dev/Codecademy/what.ecom/backend/data/utils/sample_data/products_categories.csv'
  DELIMITER ',' CSV HEADER;